package or.co.org.coco.kr.ttido.studyJava.classStudy;
/*
*
*멋진 자동차가 존재할 때 이 자동차 객체와 관련된 속성과 기능을 정의해보자.
*
*속성 : 1. 모델 / 바퀴의 수 /문짝 수 창문 수 에어컨 등등 여러 소자들
* 기능 : 시동 결기  / 에어컨 키기 시트 열선 키기 등등
*
* 여기서 속성은 변수들을 의미하고 기능은 메서드를 의미한다.
*
*아래에 카라는 클래스 즉 설계도에 속성인 변수와 기능인 메서드를 넣어보자.!!
* */
public class Car {
    private String model ;
    private int wheels;
    private int door;
    private int windows;
    //변수들의 일부를 넣은 것이다. !!  !! !!  !! 아래에는 기능인 메서드를 나타낼 것이다.

    void power (){
        // power에 해당하는 기능이 들어갔다.
    }
    void sheet_hitter(){}

/*
 코드를 통해 각각의 속성과 기능들을 넣었다. >>> 즉 클래스는 유사한 기능을 또는 같이 사용되는 기능들을 넣어 하나의 영역으로 묶은 것이라고 생각한다.
 이를 통해 각 멤버들의 유지보수가 쉽고 데이터 관리가 용이해졌다.
 이렇게 보니 클래스를 만드는 것은 설계도를 만드는 것과 유사하다는 것을 알 수 있다
  객체 생성은 어떻게 할까?
        객체 생성시 / 인스턴스 생성 시 필요한 것은 new !!!
            new를 통해 객체를 생성한 후 참조변수에 저장하게 된다면 참조변수명.매소드이름()을 통해 메소드를 호출할 수가 있따.
            같은 패키지 내의 클래스의 경우는 따로 경로를 지정해 주지않고 호출이 가능하다.
            SimpleCalculator 를 객체로 즉 인스턴스로 만들어 참조변수 cal에 그 참조 값을 넣어 주도록하겠다.
  */

    SimpleCalculator cal = new SimpleCalculator();      // 클래스는 ()가 없다 근데 인스턴스를 만들때는 괄호를 사용하고 있다.
                                                        // 이를 통해 우리는 생성자라는 메소드의 인스턴스화를 객체를 생성하고 있다는 사실을 알 수 있다.
                                                        /*
                                                        * 객체를 생성할 떄 필요한 키워드는 new  !!!!!!!!
                                                        * 클래스명 참조변수명 = new 생성자();
                                                        * but 생성자라는 메서드를 정의할 때는 메서드의 이름을 클래스명과 일치시킴
                                                        * 그렇기에 그냥 클래스를 넣는다고 생각해도 무방하긴함
                                                        *
                                                        *
                                                        * 그렇다면 NEW라는 키워드는?
                                                        * 생성된 객체를 힙 메모리에 넣으라는 의미이다.
                                                        * 참조 변수는 힙 메모리의 주소값을 가지게 된다.
                                                        *
                                                        *
                                                        *
                                                        * */
}